// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  stores        Store[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Store {
  id           String         @id @default(cuid())
  name         String
  products     Product[]
  Transactions Transactions[]
  User         User?          @relation(fields: [userId], references: [id])
  userId       String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Product {
  id           String         @id @default(cuid())
  name         String
  sellPrice    Int
  qty          Int
  Store        Store?         @relation(fields: [storeId], references: [id])
  storeId      String?
  transactions Transactions[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Transactions {
  id        String           @id @default(cuid())
  type      TransactionsType
  qty       Int
  price     Int
  Store     Store?           @relation(fields: [storeId], references: [id])
  storeId   String?
  Product   Product?         @relation(fields: [productId], references: [id])
  productId String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum TransactionsType {
  IN
  OUT
}
